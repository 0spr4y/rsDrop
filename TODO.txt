

- Unbounded memory growth (DoS): server stores pastes in RAM with only time-based expiry; no cap on total count or bytes. Add a global memory/paste cap and eviction (LRU/TTL), and reject writes when over limit. Consider per-IP quotas.
- Missing HTTP body size limit: JSON request bodies are not capped at the transport layer, allowing oversized payloads to be read before size checks. Add `DefaultBodyLimit` or `RequestBodyLimitLayer` (e.g., ~11 MiB) to Axum.
- No rate limiting/throttling: endpoints can be spammed to exhaust RAM/CPU. Add per-IP rate limiting (tower layers) and cheap pre-checks.
- Client XSS via error rendering: `web/retrieve.html` uses `innerHTML` with interpolated `error.message` that may include server response text. Switch to `textContent` for errors (or escape before inserting).
- Missing security headers: no CSP/Referrer-Policy/X-Content-Type-Options. Serve static pages with a strict CSP (no inline, nonce-based if needed) and add common headers.
- Build fragility (non-security): missing `handle_retrieve_page`/`handle_get_encrypted_paste` implementations referenced by routes; Cargo edition set to `2024` may not be available on stable.
